package ramlakhan;
import java.security.SecureRandom;
import java.sql.Connection;

public class Team {
    
    //Properties of a Team Object:
    private String tournamentID;
    private String teamName;    
    private String gkID;
    private String cbID;
    private String cdmID;
    private String camID;
    private String stID;
    private String username;
    private String tournamentName;
    private int points;
    private int wins;
    private int draws;
    private int losses;
    private int goalsScored;
    
    //Additional objects required:
    private Database db = new Database ();
    private static PlayersArray playerArr = new PlayersArray (); 
    //made static to be referenced in static context contents
    
    /*
    Team Constructor: (User)
    * Creates a team for a user.
    - Receives the following properties to create the User's team:
        > The user's name
        > The user's team name
        > The user's tournament name
        > The Player ID of the Goalkeeper
        > The Player ID of the Centre Back
        > The Player ID of the Central Defensive Midfielder
        > The Player ID of the Central Attacking Midfielder
        > The Player ID of the Striker
    - Sets the team's points and results to 0.
    */
    public Team (String un, String tN, String toN, String gk, String cb, String cdm, String cam, String st){
        username = un;
        teamName = tN;
        tournamentName = toN;
        gkID = gk; 
        cbID = cb; 
        cdmID = cdm; 
        camID = cam; 
        stID = st; 
      
        points = 0;
        wins = 0;
        draws = 0;
        goalsScored = 0;
    }//Team Object (User)

    /*
    Team Constructor: (Generated)
    * An overloaded constructor that creates a team for an opponent
    - Receives the Tournament Name set by the user and the Tournament ID
      generated by the program.
    - Calls the generateLOQ method to generate numbers 1 to 5 in a random order 
      and temporarily stores them in an array.
    - Calls the getOpponentPlayers method to randomly select a player by parsing
      the position and level of quality number as per the array's index.
    - Sets the team's points and results to 0.
    */
    public Team (String tID, String tN){
        tournamentID = tID;
        teamName = tN;
        int loq [] = generateLOQ ();
        gkID = getOpponentPlayers ("GK", "" + loq [0]); 
        cbID = getOpponentPlayers ("CB", "" + loq [1]); 
        cdmID = getOpponentPlayers ("CDM", "" + loq [2]); 
        camID = getOpponentPlayers ("CAM", "" + loq [3]); 
        stID = getOpponentPlayers ("ST", "" + loq [4]); 
        
        points = 0;
        wins = 0;
        draws = 0;
        goalsScored = 0;
    }//Team Object (Opponent)
    
    /*
    updatePoints Mutator Method:
    * Updates the points acquired by a team based off their results.
    - Resets the number of points before each update.
    */
    public void updatePoints (){
        points = 0;
        points += wins * 1000;
        points += draws * 500;
        points += losses * 200;
        points += goalsScored * 100;
    }//setPoints
    
    /*
    updateForm Mutator Method:
    * Updates the results of a team.
    - Receives the number of wins, draws, losses and goals scored to append by.
    */
    public void updateForm (int wns, int drws, int los, int gs){
        wins += wns;
        draws += drws;
        losses += los;
        goalsScored +=  gs;
    }//updateForm
    
    /*
    getTournamentID Accessor Method:
    * Returns the Tournament ID of a Team. (String)
    */
    public String getTournamentID (){
        return tournamentID;
    }//getTournamentID
    
    /*
    getUsername Accessor Method:
    * Returns the Username of a User Team. (String)
    */
    public String getUsername (){
        return username;
    }//getUsername
    
    /*
    getTeamName Accessor Method:
    * Returns the Team Name of a Team. (String)
    */
    public String getTeamName (){
        return teamName;
    }//getTeamName
    
    /*
    getTournamentName Accessor Method:
    * Returns the Tournament Name of a Team. (String)
    */
    public String getTournamentName (){
        return tournamentName;
    }//getTournamentName
    
    /*
    getWins Accessor Method:
    * Returns the number of Wins of a Team. (String)
    - Typecasts the integer win into a String.
    */
    public String getWins (){
        return "" + wins;
    }//getWins
    
    /*
    getDraws Accessor Method:
    * Returns the number of Draws of a Team. (String)
    - Typecasts the integer draw into a String.
    */
    public String getDraws (){
        return "" + draws;
    }//getDraws
    
    /*
    getLosses Accessor Method:
    * Returns the number of Losses of a Team. (String)
    - Typecasts the integer losses into a String.
    */
    public String getLosses (){
        return "" + losses;
    }//getLosses
    
    /*
    getPoints Accessor Method:
    * Returns the number of Points of a Team. (Integer)
    */
    public int getPoints (){
        return points;
    }//getPoints
    
    /*
    getGoalsScored Accessor Method:
    * Returns the number of Goals Scored of a Team. (String)
    - Typecasts the integer goalsScored into a String.
    */
    public String getGoalsScored (){
        return "" + goalsScored;
    }//getGoalsScored
    
    /*
    getGK Accessor Method:
    * Returns the Goalkeeper of a Team as a Player object.
    - Creates a temporary Player object.
    - Initializes the Player object by calling the getPlayer method followed by 
      the findPlayer method from the PlayersArray Class. 
    - The findPlayer finds the player using the GK's Player ID (gkID).
    */
    public Player getGK (){
        Player gk;
        gk = playerArr.getPlayer(playerArr.findPlayer(gkID));
        return gk;
    }//getGK
    
    /*
    getCB Accessor Method:
    * Returns the Centre Back of a Team as a Player object.
    - Creates a temporary Player object.
    - Initializes the Player object by calling the getPlayer method followed by 
      the findPlayer method from the PlayersArray Class. 
    - The findPlayer finds the player using the CB's Player ID (cbID).
    */
    public Player getCB (){
        Player cb;
        cb = playerArr.getPlayer(playerArr.findPlayer(cbID));
        return cb;
    }//getCB
    
    /*
    getCDM Accessor Method:
    * Returns the Central Defensive Midfielder of a Team as a Player object.
    - Creates a temporary Player object.
    - Initializes the Player object by calling the getPlayer method followed by 
      the findPlayer method from the PlayersArray Class. 
    - The findPlayer finds the player using the CDM's Player ID (cdmID).
    */
    public Player getCDM (){
        Player cdm;
        cdm = playerArr.getPlayer(playerArr.findPlayer(cdmID));
        return cdm;
    }//getCDM
    
    /*
    getCAM Accessor Method:
    * Returns the Central Attacking Midfielder of a Team as a Player object.
    - Creates a temporary Player object.
    - Initializes the Player object by calling the getPlayer method followed by 
      the findPlayer method from the PlayersArray Class. 
    - The findPlayer finds the player using the CAM's Player ID (camID).
    */
    public Player getCAM (){
        Player cam;
        cam = playerArr.getPlayer(playerArr.findPlayer(camID));
        return cam;
    }//getCAM
    
    /*
    getST Accessor Method:
    * Returns the Striker of a Team as a Player object.
    - Creates a temporary Player object.
    - Initializes the Player object by calling the getPlayer method followed by 
      the findPlayer method from the PlayersArray Class. 
    - The findPlayer finds the player using the ST's Player ID (stID).
    */
    public Player getST (){
        Player st;
        st = playerArr.getPlayer(playerArr.findPlayer(stID));
        return st;
    }//getST
    
    /*
    getTeamPlayers Accessor and Mutator Method:
    * Formats and returns a String array listing the Team's Players.
    - A String array is created to store 5 Strings where each index stores a 
      player of a specific position. 
    - Calls the get*Position* method of the Team's class and then calls the 
      getFirstName and getSurname methods of the Player's class to generate a
      player's name neatly.
    - Example: "[CAM] - Lionel Messi"
    */
    public String [] getTeamPlayers (){
        String teamPlayers [] = new String [5];
        
        teamPlayers [0] = "[GK] - " + this.getGK().getFirstName() + " " 
                                    + this.getGK().getSurname();
        
        teamPlayers [1] = "[CB] - " + this.getCB().getFirstName() + " " 
                                    + this.getCB().getSurname();
        
        teamPlayers [2] = "[CDM] - " + this.getCDM().getFirstName() + " " 
                                     + this.getCDM().getSurname();
        
        teamPlayers [3] = "[CAM] - " + this.getCAM().getFirstName() + " " 
                                     + this.getCAM().getSurname();
        
        teamPlayers [4] = "[ST] - " + this.getST().getFirstName() + " " 
                                    + this.getST().getSurname();
        
        return teamPlayers;
    }//getTeamPlayers
    
    /*
    generateLOQ Accessor and Mutator Method:
    * Generates numbers 1 to 5 and places them in a random order into an int array.
    * Method is static as it needs to be accessed by other classes independently
      of a Team object.
    - Code has been externally sourced and adapted to fit the program requirements.
    https://www.youtube.com/watch?v=Q8OWCDlFoVo&list=PL79nsbeypYKEFBUfWTczAixnTFOVqPin6&index=3
    */
    public static int [] generateLOQ (){
        int randomNumbers [] = new int [5];
        int range [] = new int [5];
        int indexBounds = 5;
        int randomNum;
        
        SecureRandom random = new SecureRandom();
        
        for (int index = 0; index < 5; index++){
            range [index] = index + 1;
        }//end for loop (indexing and setting range)
        
        for (int index = 0; index < 5; index++ ){
            randomNum = random.nextInt(indexBounds);
            randomNumbers [index] = range [randomNum];
            range [randomNum] = range [indexBounds - 1];
            indexBounds--;
        }//end for loop (placing random numbers into array)
 
        return randomNumbers;
    }//generateLOQ 
    
    /*
    getPossiblePlayers Accessor and Mutator Method:
    * Returns a formatted list of players that are selectable based on their 
      position and level of quality.
    * Method is static as it needs to be accessed by other classes independently
      of a Team object.
    - Receives the position, level of quality number and boolean to indicate the 
      type of formatting required.
    
    Algorithm Process:
    - A String array to store the list of players, as well as a temporary Player
      object and an index and count (both initialised to 0) is created.
    - A while loop tests that the index is less than 125 (max number of players)
      or that the count is not greater than 5 (max number of possible selections). 
    - The tempPlayer object is overwritten at the beginning of the loop and is 
      assigned the Player who has that index from the PlayersArray by calling
      the getPlayer method from the PlayersArray Class and parsing the index.
    - An if statement is used to check if the tempPlayer has the same position
      and level of quality number that was received by the method.
    - Based on the boolean:
        > if true: possiblePlayers array at count is initialized to tempPlayer 
        which is formatted using the formatSelectablePlayer method of PlayersArray.
        > if false: possiblePlayers array at count is initialized to the tempPlayer
         Players ID by calling the getPlayer and getPlayerID methods of the 
         PlayersArray and Player class respectively.
    - The count is incremeneted if the tempPlayer matched the parameters.
    - The index is incremented before the end of the while loop.
    */
    public static String [] getPossiblePlayers (String position, String loq, boolean format){
        String possiblePlayers [] = new String [5];
        Player tempPlayer;
        int index = 0;
        int count = 0;
        
        while (index < 125 || count < 5){
            tempPlayer = playerArr.getPlayer (index);
            if (tempPlayer.getPosition().equals(position) && tempPlayer.getLOQ().equals(loq)){
                if (format == true){
                    possiblePlayers [count] = playerArr.formatSelectablePlayer(index);
                }//nested if
                else if (format == false) {
                    possiblePlayers [count] = playerArr.getPlayer(index).getPlayerID();
                }//else if
                count++;
            }//if then
            index++;
        }//end while loop
        
        return possiblePlayers;
    }//getPossiblePlayers 
    
    /*
    getOpponentPlayers Accessor and Mutator Method:
    * Randomly selects and returns the Player ID of a randomly chosen player
      based on the position and level of quality. (String)
    - Receives the required position and level of quality.
    - Runs the getPossiblePlayers method with parsed parameters and a false
      boolean to only get the Players ID's.
    - Generates a random number between 1 to 5 using generateLOQ and takes
      the first index value of the returned array.
    - A String is assigned the value of the players array based on the randomly
      generated index number. (this number is subtracted by 1 to be withing range)
    */
    public static String getOpponentPlayers (String position, String loq){
        String players [] = Team.getPossiblePlayers(position, loq, false);
        int randomIndex = Team.generateLOQ() [0];
        String playerID = players [randomIndex - 1]; 
        return playerID;
    }//getOpponentPlayers 
    
    /*
    addTeamToDatabase Mutator Method:
    * Adds a User team to the Teams table in the Database and calls the
      getTop1StringRecord Accessor method from the Database class to get the 
      generated AutoNumber (the primary key) from the Teams table.
    */
    public void addTeamToDatabase (){
        db.runTeamInsertQuery(this);
        tournamentID = db.getTop1StringRecord("Tournament ID", "Teams", 
                "Username = '" + username + "' AND [Team Name] = '" 
                        + teamName + "' AND [Tournament Name] = '" 
                        + tournamentName + "' ", "DESC");
    }//addTeamToDatabase
    
}//Team Class
